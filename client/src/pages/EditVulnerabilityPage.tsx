import React, { useState, useEffect } from 'react';
import VulnerabilityForm, { VulnerabilityFormData, Vulnerability } from '../../components/forms/VulnerabilityForm';
import { useLocation, Link, useRoute } from 'wouter'; // Link for navigation, useLocation for redirect, useRoute for params
import Button from '../../components/ui/Button'; // For consistency

const EditVulnerabilityPage: React.FC = () => {
  const [, setLocation] = useLocation();
  const [match, params] = useRoute<{ id?: string }>("/vulnerabilities/:id/edit"); // Updated route
  const vulnerabilityId = params?.id;

  const [initialData, setInitialData] = useState<Partial<Vulnerability> | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false); // For form submission
  const [pageLoading, setPageLoading] = useState<boolean>(true); // For fetching initial data
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!vulnerabilityId) {
      setError("No vulnerability ID provided in URL.");
      setPageLoading(false);
      return;
    }

    const fetchVulnerability = async () => {
      setPageLoading(true);
      setError(null);
      try {
        const response = await fetch(`/api/vulnerabilities/${vulnerabilityId}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            // Auth handled by session cookie
          },
        });

        if (response.ok) {
          const data: Vulnerability = await response.json();
          setInitialData(data);
        } else if (response.status === 404) {
          setError('Vulnerability not found.');
        } else {
          const errorData = await response.json();
          setError(errorData.message || 'Failed to fetch vulnerability data.');
        }
      } catch (err) {
        console.error('Error fetching vulnerability data:', err);
        setError('An unexpected error occurred while fetching vulnerability data.');
      } finally {
        setPageLoading(false);
      }
    };

    fetchVulnerability();
  }, [vulnerabilityId]);

  const handleSubmit = async (formData: VulnerabilityFormData) => {
    if (!vulnerabilityId) {
      setError("Cannot submit form: Vulnerability ID is missing.");
      return;
    }
    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch(`/api/vulnerabilities/${vulnerabilityId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          // Auth handled by session cookie
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        setLocation('/'); // Redirect to dashboard or a global vulnerabilities page if created
      } else {
        const errorData = await response.json();
        setError(errorData.message || 'Failed to update vulnerability. Please try again.');
      }
    } catch (err) {
      console.error('Error updating vulnerability:', err);
      setError('An unexpected error occurred. Please check your connection and try again.');
    } finally {
      setIsLoading(false);
    }
  };

  if (pageLoading) {
    return (
      <div className="container mx-auto px-4 py-8 text-center">
        Loading vulnerability data...
      </div>
    );
  }

  if (error && !initialData) {
    return (
      <div className="container mx-auto px-4 py-8 text-center text-red-500">
        Error: {error}
        <div className="mt-4">
          <Link href="/">
            <Button variant="outline" className="text-sm">
                &larr; Back to Dashboard
            </Button>
          </Link>
        </div>
      </div>
    );
  }
  
  if (!initialData) {
      return (
          <div className="container mx-auto px-4 py-8 text-center">
            Vulnerability could not be loaded. It might have been deleted or the ID is incorrect.
            <div className="mt-4">
                <Link href="/">
                    <Button variant="outline" className="text-sm">
                        &larr; Back to Dashboard
                    </Button>
                </Link>
            </div>
          </div>
      );
  }


  return (
    <div className="container mx-auto px-4 py-8 max-w-2xl">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-gray-800">Edit Vulnerability (ID: {vulnerabilityId})</h1>
        <Link href="/">
            <Button variant="outline" className="text-sm">
                &larr; Back to Dashboard
            </Button>
        </Link>
      </div>
      
      <VulnerabilityForm
        initialData={initialData}
        onSubmit={handleSubmit}
        isEditing={true}
        isLoading={isLoading}
        error={error}
        submitButtonText="Save Changes"
      />
    </div>
  );
};

export default EditVulnerabilityPage;
