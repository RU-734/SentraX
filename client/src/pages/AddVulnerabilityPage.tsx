import React, { useState } from 'react';
import VulnerabilityForm, { VulnerabilityFormData } from '../../components/forms/VulnerabilityForm';
import { useLocation, Link } from 'wouter'; // Link for navigation, useLocation for redirect
import Button from '../../components/ui/Button'; // For consistency, though form has its own

const AddVulnerabilityPage: React.FC = () => {
  const [, setLocation] = useLocation();
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (formData: VulnerabilityFormData) => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/vulnerabilities', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          // Auth is handled by session cookie
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        // const newVulnerability = await response.json();
        // Redirect to a global vulnerabilities list page if it exists, or dashboard/assets
        // For now, redirecting to / (Dashboard) as a placeholder
        setLocation('/'); 
        // Or: setLocation(`/vulnerabilities/${newVulnerability.id}`); // If a detail page exists
      } else {
        const errorData = await response.json();
        setError(errorData.message || 'Failed to create vulnerability. Please try again.');
      }
    } catch (err) {
      console.error('Error creating vulnerability:', err);
      setError('An unexpected error occurred. Please check your connection and try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8 max-w-2xl">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-gray-800">Add New Vulnerability</h1>
        <Link href="/">
          <Button variant="outline" className="text-sm">
            &larr; Back to Dashboard
          </Button>
        </Link>
      </div>
      
      <VulnerabilityForm
        onSubmit={handleSubmit}
        isEditing={false}
        isLoading={isLoading}
        error={error}
        submitButtonText="Add Vulnerability"
      />
    </div>
  );
};

export default AddVulnerabilityPage;
