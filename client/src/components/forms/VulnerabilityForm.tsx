import React, { useState, useEffect, FormEvent } from 'react';
import Button from '../ui/Button';
import { Input } from '../ui/input';
import { Label } from '../ui/label';
// Assuming a Select component exists or will be created based on ui components like input/button
// For now, using a standard select. If specific ui/Select exists, can be swapped.
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select'; 
import { Textarea } from '../ui/textarea'; // Assuming Textarea exists
import { vulnerabilitySeverityEnum } from '@shared/schema'; // Path based on project structure

// Interface for the data the form will handle
export interface VulnerabilityFormData {
  name: string;
  description: string;
  severity: typeof vulnerabilitySeverityEnum.enumValues[number];
  cvssScore?: string | null; // Stored as string to allow for "7.5" type inputs
  references?: string[]; // Array of strings
  source?: string | null;
}

// Interface for the full Vulnerability object (if needed for initialData that includes id, etc.)
export interface Vulnerability extends VulnerabilityFormData {
  id: number;
  createdAt?: string;
  updatedAt?: string;
}

interface VulnerabilityFormProps {
  initialData?: Partial<Vulnerability>; // For editing
  onSubmit: (formData: VulnerabilityFormData) => Promise<void>;
  isEditing: boolean;
  isLoading?: boolean;
  error?: string | null;
  submitButtonText?: string;
}

const VulnerabilityForm: React.FC<VulnerabilityFormProps> = ({
  initialData,
  onSubmit,
  isEditing,
  isLoading = false,
  error = null,
  submitButtonText,
}) => {
  const [name, setName] = useState<string>('');
  const [description, setDescription] = useState<string>('');
  const [severity, setSeverity] = useState<typeof vulnerabilitySeverityEnum.enumValues[number]>(vulnerabilitySeverityEnum.enumValues[2]); // Default to 'medium'
  const [cvssScore, setCvssScore] = useState<string>('');
  const [references, setReferences] = useState<string>(''); // Storing as a single string, split on submit
  const [source, setSource] = useState<string>('');
  const [formError, setFormError] = useState<string | null>(null);

  useEffect(() => {
    if (initialData) {
      setName(initialData.name || '');
      setDescription(initialData.description || '');
      setSeverity(initialData.severity || vulnerabilitySeverityEnum.enumValues[2]);
      setCvssScore(initialData.cvssScore || '');
      setReferences((initialData.references || []).join('\n'));
      setSource(initialData.source || '');
    }
  }, [initialData]);

  const validateCvssScore = (score: string): boolean => {
    if (score === '' || score === null) return true; // Optional
    const num = parseFloat(score);
    return !isNaN(num) && num >= 0.0 && num <= 10.0;
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setFormError(null);

    if (!validateCvssScore(cvssScore)) {
      setFormError('CVSS Score must be a number between 0.0 and 10.0.');
      return;
    }

    const formData: VulnerabilityFormData = {
      name,
      description,
      severity,
      cvssScore: cvssScore || null,
      references: references.split('\n').map(ref => ref.trim()).filter(ref => ref), // Split by newline, trim, remove empty
      source: source || null,
    };
    await onSubmit(formData);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6 p-6 bg-white shadow-md rounded-lg">
      <div>
        <Label htmlFor="name">Name <span className="text-red-500">*</span></Label>
        <Input
          id="name"
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          required
          className="mt-1"
        />
      </div>

      <div>
        <Label htmlFor="description">Description <span className="text-red-500">*</span></Label>
        <Textarea
          id="description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          required
          rows={4}
          className="mt-1"
        />
      </div>

      <div>
        <Label htmlFor="severity">Severity <span className="text-red-500">*</span></Label>
        <select // Using standard select, replace with ui/Select if available and preferred
          id="severity"
          value={severity}
          onChange={(e) => setSeverity(e.target.value as typeof vulnerabilitySeverityEnum.enumValues[number])}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
        >
          {vulnerabilitySeverityEnum.enumValues.map((enumValue) => (
            <option key={enumValue} value={enumValue}>
              {enumValue.charAt(0).toUpperCase() + enumValue.slice(1).replace('_', ' ')}
            </option>
          ))}
        </select>
      </div>
      
      <div>
        <Label htmlFor="cvssScore">CVSS Score (0.0-10.0)</Label>
        <Input
          id="cvssScore"
          type="text" // Using text to allow for "7.5" style input easily
          value={cvssScore}
          onChange={(e) => setCvssScore(e.target.value)}
          className="mt-1"
          placeholder="e.g., 7.5"
        />
      </div>

      <div>
        <Label htmlFor="source">Source</Label>
        <Input
          id="source"
          type="text"
          value={source}
          onChange={(e) => setSource(e.target.value)}
          className="mt-1"
          placeholder="e.g., NVD, Scanner Name, Manual Discovery"
        />
      </div>
      
      <div>
        <Label htmlFor="references">References (one URL per line)</Label>
        <Textarea
          id="references"
          value={references}
          onChange={(e) => setReferences(e.target.value)}
          rows={3}
          className="mt-1"
          placeholder="e.g., https://cve.mitre.org/..."
        />
      </div>

      {formError && (
        <p className="text-sm text-red-600 text-center">{formError}</p>
      )}
      {error && ( // External error from props (e.g., API error)
        <p className="text-sm text-red-600 text-center">{error}</p>
      )}

      <div>
        <Button type="submit" className="w-full" disabled={isLoading}>
          {isLoading 
            ? (isEditing ? 'Saving...' : 'Adding...') 
            : (submitButtonText || (isEditing ? 'Save Changes' : 'Add Vulnerability'))}
        </Button>
      </div>
    </form>
  );
};

export default VulnerabilityForm;
