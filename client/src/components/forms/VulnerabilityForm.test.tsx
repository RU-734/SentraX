import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import VulnerabilityForm, { VulnerabilityFormData } from './VulnerabilityForm';
import { vulnerabilitySeverityEnum } from '@shared/schema';

const mockOnSubmit = jest.fn();

const defaultProps = {
  onSubmit: mockOnSubmit,
  isEditing: false,
  isLoading: false,
  error: null,
};

const initialDataForEdit: VulnerabilityFormData & { id: number } = {
  id: 1,
  name: 'Test Vuln',
  description: 'Test Description',
  severity: vulnerabilitySeverityEnum.enumValues[1], // high
  cvssScore: '9.0',
  references: ['http://example.com/ref1', 'http://example.com/ref2'],
  source: 'NVD',
};

describe('VulnerabilityForm Component', () => {
  beforeEach(() => {
    mockOnSubmit.mockClear();
  });

  test('renders all form fields correctly for new vulnerability', () => {
    render(<VulnerabilityForm {...defaultProps} />);

    expect(screen.getByLabelText(/Name/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/Description/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/Severity/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/CVSS Score/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/Source/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/References/i)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Add Vulnerability/i })).toBeInTheDocument();
  });

  test('pre-fills form fields when initialData is provided (editing)', () => {
    render(<VulnerabilityForm {...defaultProps} isEditing={true} initialData={initialDataForEdit} />);

    expect(screen.getByLabelText(/Name/i)).toHaveValue(initialDataForEdit.name);
    expect(screen.getByLabelText(/Description/i)).toHaveValue(initialDataForEdit.description);
    expect(screen.getByLabelText(/Severity/i)).toHaveValue(initialDataForEdit.severity);
    expect(screen.getByLabelText(/CVSS Score/i)).toHaveValue(initialDataForEdit.cvssScore);
    expect(screen.getByLabelText(/Source/i)).toHaveValue(initialDataForEdit.source);
    expect(screen.getByLabelText(/References/i)).toHaveValue(initialDataForEdit.references.join('\n'));
    expect(screen.getByRole('button', { name: /Save Changes/i })).toBeInTheDocument();
  });

  test('calls onSubmit with correct form data on new vulnerability submission', async () => {
    const user = userEvent.setup();
    render(<VulnerabilityForm {...defaultProps} />);

    const testData: VulnerabilityFormData = {
      name: 'New Vuln',
      description: 'New Desc',
      severity: 'medium',
      cvssScore: '5.5',
      references: ['http://new.com'],
      source: 'Scanner',
    };

    await user.type(screen.getByLabelText(/Name/i), testData.name);
    await user.type(screen.getByLabelText(/Description/i), testData.description);
    await user.selectOptions(screen.getByLabelText(/Severity/i), testData.severity);
    await user.type(screen.getByLabelText(/CVSS Score/i), testData.cvssScore as string);
    await user.type(screen.getByLabelText(/Source/i), testData.source as string);
    await user.type(screen.getByLabelText(/References/i), (testData.references as string[]).join('\n'));
    
    fireEvent.submit(screen.getByRole('button', { name: /Add Vulnerability/i }));

    await waitFor(() => {
      expect(mockOnSubmit).toHaveBeenCalledTimes(1);
      expect(mockOnSubmit).toHaveBeenCalledWith(testData);
    });
  });
  
  test('calls onSubmit with updated form data on editing', async () => {
    const user = userEvent.setup();
    render(<VulnerabilityForm {...defaultProps} isEditing={true} initialData={initialDataForEdit} />);
    
    const updatedName = "Updated Test Vuln";
    const nameInput = screen.getByLabelText(/Name/i);
    await user.clear(nameInput); // Clear existing value
    await user.type(nameInput, updatedName);

    fireEvent.submit(screen.getByRole('button', { name: /Save Changes/i }));

    await waitFor(() => {
      expect(mockOnSubmit).toHaveBeenCalledTimes(1);
      expect(mockOnSubmit).toHaveBeenCalledWith(expect.objectContaining({
        ...initialDataForEdit, // cvssScore, references, source should still be there
        name: updatedName, // Only name is changed in this test
        // references are arrays, ensure the form submission logic handles splitting them correctly
        references: initialDataForEdit.references, 
      }));
    });
  });

  test('severity dropdown selects correct value', async () => {
    const user = userEvent.setup();
    render(<VulnerabilityForm {...defaultProps} />);
    const severitySelect = screen.getByLabelText(/Severity/i);

    await user.selectOptions(severitySelect, vulnerabilitySeverityEnum.enumValues[0]); // critical
    expect(severitySelect).toHaveValue(vulnerabilitySeverityEnum.enumValues[0]);

    await user.selectOptions(severitySelect, vulnerabilitySeverityEnum.enumValues[3]); // low
    expect(severitySelect).toHaveValue(vulnerabilitySeverityEnum.enumValues[3]);
  });

  test('shows validation error for invalid CVSS score', async () => {
    const user = userEvent.setup();
    render(<VulnerabilityForm {...defaultProps} />);
    
    await user.type(screen.getByLabelText(/CVSS Score/i), '11.0'); // Invalid score
    fireEvent.submit(screen.getByRole('button', { name: /Add Vulnerability/i }));

    await waitFor(() => {
      expect(screen.getByText(/CVSS Score must be a number between 0.0 and 10.0./i)).toBeInTheDocument();
      expect(mockOnSubmit).not.toHaveBeenCalled();
    });
  });
  
  test('submits successfully with empty optional fields (CVSS, source, references)', async () => {
    const user = userEvent.setup();
    render(<VulnerabilityForm {...defaultProps} />);

    const testData: VulnerabilityFormData = {
      name: 'Minimal Vuln',
      description: 'Minimal Desc',
      severity: 'low',
      cvssScore: null, // Explicitly empty
      references: [],  // Explicitly empty
      source: null,    // Explicitly empty
    };
    
    await user.type(screen.getByLabelText(/Name/i), testData.name);
    await user.type(screen.getByLabelText(/Description/i), testData.description);
    await user.selectOptions(screen.getByLabelText(/Severity/i), testData.severity);
    // CVSS, Source, References are left empty

    fireEvent.submit(screen.getByRole('button', { name: /Add Vulnerability/i }));

    await waitFor(() => {
      expect(mockOnSubmit).toHaveBeenCalledTimes(1);
      expect(mockOnSubmit).toHaveBeenCalledWith(testData);
    });
  });
});
